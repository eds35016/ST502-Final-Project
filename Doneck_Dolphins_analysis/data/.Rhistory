ggplot(Trier_data, aes(id_game, TS_min, group = Player, colour = Player)) +
geom_point(size = 5) +
geom_line(size = 3, linetype = 'solid') +
labs(x = "Game", y = expression("True Shooting % /min")) +
theme_classic(base_size = 20, base_line_size = 15/20) +
theme(
panel.grid.major = element_line(colour = rgb(212/255, 211/255, 217/255)),
legend.position = "right",
legend.text = element_text(size = 14)
) +
scale_colour_brewer(palette = "Set1", guide = guide_legend(ncol = 1)) +
scale_x_continuous(breaks = seq(0, 18, 2)) +
scale_y_continuous(breaks = seq(-1, 1, 0.25), limits = c(-1, 1))
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/posterior_probabilities_players2.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/posterior_probabilities_players2.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/posterior_probabilities_players2.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/maximization_with_data.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/barplots_5th_player_new.R", echo=TRUE)
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_PIR_sigmas.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_EFF_sigmas.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_Winscore_sigmas.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_TS_sigmas.RData')
# 2. Posterior probability of compatibility-----------
# Probability of being in the lineup
posterior <- posterior_PIR
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 3) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/draws_PIR.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/PIT_PIR.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/draws_EFF.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/PIT_EFF.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/draws_WIN.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/PIT_WIN.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/draws_TS.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/PIT_TS.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/plot_PITS.R", echo=TRUE)
# Final plot-------------------
plot(Trier_data$id_game, PIT_EFF, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 2, col='#fde725')
lines(Trier_data$id_game, PIT_PIR, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 3,
col='#21918c', type = 'p')
lines(Trier_data$id_game, PIT_WIN, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#440154', type = 'p')
lines(Trier_data$id_game, PIT_TS, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#FF69B4', type = 'p')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/PIT_EFF2.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/PIT_PIR2.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/PIT_WIN2.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/PIT_TS2.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData')
# Final plot-------------------
plot(Trier_data$id_game, PIT_EFF, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 2, col='#fde725')
lines(Trier_data$id_game, PIT_PIR, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 3,
col='#21918c', type = 'p')
lines(Trier_data$id_game, PIT_WIN, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#440154', type = 'p')
lines(Trier_data$id_game, PIT_TS, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#FF69B4', type = 'p')
str(Trier_data)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/PIT_TS.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/plot_PITS.R", echo=TRUE)
plot(Trier_data$id_game, PIT_EFF, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 2, col='#fde725')
lines(Trier_data$id_game, PIT_PIR, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 3,
col='#21918c', type = 'p')
lines(Trier_data$id_game, PIT_WIN, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#440154', type = 'p')
lines(Trier_data$id_game, PIT_TS, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#FF69B4', type = 'p')
legend('top', legend=c("EFF", "PIR", "Win Score", "TS%"),
col=c("#fde725", "#21918c", '#440154', '#FF69B4'),pch=2:4, cex=1.1,
horiz = T)
abline(h = 0.5, col = 'blue', lty = 2, lwd = 3)
for(i in 1:9){
plot(Trier_data$id_game[Trier_data$id_player==i],
PIT_EFF[Trier_data$id_player==i], cex.lab=1.5, cex.axis=1.5,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 2,
col='#fde725', main=paste('player',i))
}
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_PIR_sigmas.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_EFF_sigmas.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_Winscore_sigmas.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/results/lineups_TS_sigmas.RData')
# 2. Posterior probability of compatibility-----------
# Probability of being in the lineup
posterior <- posterior_PIR
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 3) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
# Probability of being in the lineup
posterior <- posterior_TS
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 3) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
posterior <- posterior_PIR
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 3) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
posterior <- posterior_TS
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 3) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
posterior <- posterior_TS
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 5) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
posterior <- posterior_TS
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 6) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
posterior <- posterior_TS
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 7) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
posterior <- posterior_TS
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1 : 3000){ #all the lineups
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by = 2),
seq(1,17, by = 2)))
}
players <- c(1, 2, 4, 9) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob <- count / 3000
players <- c(1, 2, 4, 9, 8) # indices of the players
count <- 0
for(i in 1 : 3000){
logic <- as.numeric(Lineups[i, players] == rep(1, length(players)))
if(sum(logic) == length(players)){count <- count + 1}
}
prob2 <- count / 3000
prob2 / prob # conditional probabilities
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/barplots_5th_player_new.R", echo=TRUE)
p_player <- data.frame(Player = rep(c("D. Green", "L. Jung", "N. Passivan",
"P. Dorner", "S. Erni"), 4),
Probability = c(0.16, 0.01, 0.24, 0.47, 0.12,
0.19, 0.02, 0.25, 0.44, 0.10,
0.15, 0.04, 0.25, 0.34, 0.22,
0.23, 0.07, 0.23, 0.24, 0.22),
Metric=c(rep("EFF",5), rep("PIR",5), rep("Win Score",5), rep("TS%",5)))
p_player <- data.frame(Player = rep(c("D. Green", "L. Jung", "N. Passivan",
"P. Dorner", "S. Erni"), 4),
Probability = c(0.16, 0.01, 0.24, 0.47, 0.12,
0.19, 0.02, 0.25, 0.44, 0.10,
0.15, 0.04, 0.25, 0.34, 0.22,
0.23, 0.07, 0.23, 0.24, 0.22),
Metric=c(rep("EFF",5), rep("PIR",5), rep("Win Score",5), rep("TS%",5)))
library(ggplot2)
library(viridis)
ggplot(p_player, aes(x=Player, y=Probability, fill = Metric)) +
geom_bar(stat = "identity", position = position_dodge())  +
scale_fill_viridis(discrete = TRUE, option = "D")+
theme_test(base_size = 20, base_line_size = 15/20) +
labs(x=element_blank())
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/PIT2/plot_PITS.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/posterior_probabilities_players2.R", echo=TRUE)
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/trier_data_plots.R", echo=TRUE)
plot(Trier_data$id_game, PIT_EFF, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 2, col='#fde725')
lines(Trier_data$id_game, PIT_PIR, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 3,
col='#21918c', type = 'p')
lines(Trier_data$id_game, PIT_WIN, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#440154', type = 'p')
lines(Trier_data$id_game, PIT_TS, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#FF69B4', type = 'p')
legend('top', legend=c("EFF", "PIR", "Win Score", "TS%"),
col=c("#fde725", "#21918c", '#440154', '#FF69B4'),pch=2:4, cex=1.1,
horiz = T)
abline(h = 0.5, col = 'blue', lty = 2, lwd = 3)
# 1. EFF---------------
set.seed(9257)
predictions <- model_prediction_type_sigmas(player = 1:9, type = 'EFF', match = 19) #performance predictions
#load('./data/line_ups.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/line_ups.RData')
line_ups <- line_ups[which(line_ups$allowed==1),]
line_ups <- data.frame(id=paste('L',1:91, sep = ''), line_ups)
# Building matrix with posterior predictive sample of the lineups-
post_pred_matrix <- matrix(data = NA, nrow = length(predictions[1,]),
ncol = length(line_ups[,1]))
for(i in 1 : length(predictions[1,])){
for(j in 1 : length(line_ups[,1])){
post_pred_matrix[i, j] <- predictions[line_ups$X1[j], i] + #sample i of the prediction of the first player of Lj
predictions[line_ups$X2[j], i] + #sample i of the prediction of the 2nd player of Lj
predictions[line_ups$X3[j], i] + #sample i of the prediction of the 3rd player of Lj
predictions[line_ups$X4[j], i] + #sample i of the prediction of the 4th player of Lj
predictions[line_ups$X5[j], i] #sample i of the prediction of the 5th player of Lj
}
}
post_pred_combination_EFF <- as.data.frame(post_pred_matrix)
colnames(post_pred_combination_EFF) <- paste('L',1:91, sep = '')
hist(post_pred_combination_EFF[,1])
means <- apply(post_pred_combination_EFF, FUN =mean, MARGIN = 2)
sd <- apply(post_pred_combination_EFF, FUN =sd, MARGIN = 2)
sort(means)
sd
sort(means)
means
# 2. PIR---------------
set.seed(9257)
predictions <- model_prediction_type_sigmas(player = 1:9, type = 'PIR', match = 19) #performance predictions
#load('./data/line_ups.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/line_ups.RData')
line_ups <- line_ups[which(line_ups$allowed==1),]
line_ups <- data.frame(id=paste('L',1:91, sep = ''), line_ups)
# Building matrix with posterior predictive sample of the lineups-
post_pred_matrix <- matrix(data = NA, nrow = length(predictions[1,]),
ncol = length(line_ups[,1]))
for(i in 1 : length(predictions[1,])){
for(j in 1 : length(line_ups[,1])){
post_pred_matrix[i, j] <- predictions[line_ups$X1[j], i] + #sample i of the prediction of the first player of Lj
predictions[line_ups$X2[j], i] + #sample i of the prediction of the 2nd player of Lj
predictions[line_ups$X3[j], i] + #sample i of the prediction of the 3rd player of Lj
predictions[line_ups$X4[j], i] + #sample i of the prediction of the 4th player of Lj
predictions[line_ups$X5[j], i] #sample i of the prediction of the 5th player of Lj
}
}
post_pred_combination_PIR <- as.data.frame(post_pred_matrix)
colnames(post_pred_combination_PIR) <- paste('L',1:91, sep = '')
hist(post_pred_combination_PIR[,1])
means <- apply(post_pred_combination_PIR, FUN =mean, MARGIN = 2)
sd <- apply(post_pred_combination_PIR, FUN =sd, MARGIN = 2)
sort(means)
# 4. True Shooting %---------------
set.seed(9257)
predictions <- model_prediction_type_sigmas(player = 1:9, type = 'TS', match = 19) #performance predictions
#load('./data/line_ups.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/line_ups.RData')
line_ups <- line_ups[which(line_ups$allowed==1),]
line_ups <- data.frame(id=paste('L',1:91, sep = ''), line_ups)
# Building matrix with posterior predictive sample of the lineups-
post_pred_matrix <- matrix(data = NA, nrow = length(predictions[1,]),
ncol = length(line_ups[,1]))
for(i in 1 : length(predictions[1,])){
for(j in 1 : length(line_ups[,1])){
post_pred_matrix[i, j] <- predictions[line_ups$X1[j], i] + #sample i of the prediction of the first player of Lj
predictions[line_ups$X2[j], i] + #sample i of the prediction of the 2nd player of Lj
predictions[line_ups$X3[j], i] + #sample i of the prediction of the 3rd player of Lj
predictions[line_ups$X4[j], i] + #sample i of the prediction of the 4th player of Lj
predictions[line_ups$X5[j], i] #sample i of the prediction of the 5th player of Lj
}
}
post_pred_combination_TS <- as.data.frame(post_pred_matrix)
colnames(post_pred_combination_TS) <- paste('L',1:91, sep = '')
hist(post_pred_combination_TS[,1])
means <- apply(post_pred_combination_TS, FUN =mean, MARGIN = 2)
sd <- apply(post_pred_combination_TS, FUN =sd, MARGIN = 2)
sort(means)
PIT_EFF
mean(PIT_EFF)
plot(Trier_data$id_game, PIT_EFF, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 2, col='#fde725')
lines(Trier_data$id_game, PIT_PIR, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 3,
col='#21918c', type = 'p')
lines(Trier_data$id_game, PIT_WIN, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#440154', type = 'p')
lines(Trier_data$id_game, PIT_TS, cex.lab=1.5, cex.axis=1.5, main = NULL,
xlab = 'Match', ylab = 'PIT', lwd = 3, ylim = c(0,1), pch = 4,
col='#FF69B4', type = 'p')
legend('top', legend=c("EFF", "PIR", "Win Score", "TS%"),
col=c("#fde725", "#21918c", '#440154', '#FF69B4'),pch=2:4, cex=1.1,
horiz = T)
abline(h = 0.5, col = 'blue', lty = 2, lwd = 3)
mean_EFF <- tapply(PIT_EFF, Trier_data$id_player, mean)
mean_PIR <- tapply(PIT_PIR, Trier_data$id_player, mean)
mean_WIN <- tapply(PIT_WIN, Trier_data$id_player, mean)
mean_TS  <- tapply(PIT_TS,  Trier_data$id_player, mean)
# Set up x-axis
players <- as.factor(names(mean_EFF))
# Plot setup
plot(players, mean_EFF, ylim = c(0,1), type = 'b', pch = 2, col = '#fde725',
xlab = 'Player', ylab = 'Mean PIT', lwd = 2, cex.lab = 1.5, cex.axis = 1.2)
# Add lines for other metrics
points(players, mean_PIR, type = 'b', pch = 3, col = '#21918c', lwd = 2)
points(players, mean_WIN, type = 'b', pch = 4, col = '#440154', lwd = 2)
points(players, mean_TS,  type = 'b', pch = 5, col = '#FF69B4', lwd = 2)
# Add legend
legend('topright', legend = c("EFF", "PIR", "Win Score", "TS%"),
col = c("#fde725", "#21918c", "#440154", "#FF69B4"), pch = 2:5, lwd = 2)
player_index <- 1  # change this to whichever player you want
# Count how many samples have this player
count_player <- sum(Lineups[, player_index] == 1)
# Probability that the player is present
prob_player <- count_player / 3000
print(prob_player)
calc_player_prob <- function(posterior, player_index) {
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1:3000) {
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by=2), seq(1,17, by=2)))
}
prob <- sum(Lineups[, player_index] == 1) / 3000
return(prob)
}
# Now calculate for each metric
player_index <- 1  # Change this to whichever player you want!
prob_PIR <- calc_player_prob(posterior_PIR, player_index)
prob_EFF <- calc_player_prob(posterior_EFF, player_index)
prob_Winscore <- calc_player_prob(posterior_Winscore, player_index)
prob_TS <- calc_player_prob(posterior_TS, player_index)
# Print results
cat("Probability for player", player_index, "\n")
cat("PIR: ", prob_PIR, "\n")
cat("EFF: ", prob_EFF, "\n")
cat("Winscore: ", prob_Winscore, "\n")
cat("TS: ", prob_TS, "\n")
calc_all_probs <- function(posterior) {
Lineups <- matrix(data = NA, nrow = 3000, ncol = 9)
for(i in 1:3000) {
Lineups[i, ] <- as.numeric(substring(posterior[i], seq(1,17, by=2), seq(1,17, by=2)))
}
probs <- colMeans(Lineups)  # Get probability for each player (1-9)
return(probs)
}
# Calculate for each metric
probs_PIR <- calc_all_probs(posterior_PIR)
probs_EFF <- calc_all_probs(posterior_EFF)
probs_Winscore <- calc_all_probs(posterior_Winscore)
probs_TS <- calc_all_probs(posterior_TS)
# Create a dataframe
probs_named <- data.frame(
player = rep(1:9, times = 4),
prob = c(probs_PIR, probs_EFF, probs_Winscore, probs_TS),
metric = rep(c("PIR", "EFF", "Winscore", "TS%"), each = 9)
)
library(ggplot2)
p <- ggplot(probs_named,
aes(x = factor(player), y = prob, shape = metric, color = metric)) +
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(
values = c("EFF" = 16, "Winscore" = 15, "TS%" = 17, "PIR" = 18)
) +
scale_y_continuous("Selection Probability", labels = scales::number_format(accuracy = 0.01)) +
labs(x = "Player", color = "Metric", shape = "Metric") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right"
)
print(p)
player_names <- c(
"A. Breuer", "C. Rossi", "D. Green", "D. Passivan", "L. Jung",
"N. Passivan", "P. Dorner", "S. Erni", "W. Vlaanderen"
)
p <- ggplot(probs_named,
aes(x = factor(player), y = prob, shape = metric, color = metric)) +
geom_point(size = 3, alpha = 0.8) +
scale_shape_manual(
values = c("EFF" = 16, "Winscore" = 15, "TS%" = 17, "PIR" = 18)
) +
scale_y_continuous("Selection Probability", labels = scales::number_format(accuracy = 0.01)) +
scale_x_discrete(labels = player_names) +
labs(x = NULL, color = "Metric", shape = "Metric") +
theme_bw() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "right"
)
print(p)
