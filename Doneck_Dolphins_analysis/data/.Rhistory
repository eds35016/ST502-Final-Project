diffs <- test - control
# Part a
plot(control, diffs, xlab = "Control Fault Rate", ylab = "Test - Control", main = "Difference vs Control Fault Rate", col = "blue")
abline(h=0, col = "red")
mean_diff <- mean(diffs)
cat("Mean Difference: ", mean_diff, "\n")
sd_diff <- sd(diffs)
cat("SD Difference: ", sd_diff, "\n")
n <- length(diffs)
# Part b
stand_error <- sqrt(2)
alpha_1 <- 0.05
z_1 <- qnorm(1-alpha_1) # z critical for one sided
rr <- z_1 * stand_error
# Part c
delta <- 1
power_c <- 1 - pnorm((rr - delta)/stand_error)
cat("Power for part c: ", round(power_c, 2), "\n")
# Part e
z_2 <- qnorm(1 - alpha_1/2) # calculate new z critical for two sided
rr_2 <- z_2 * stand_error
l_tail <- pnorm((-rr_2 - delta) / stand_error)
u_tail <- 1 - pnorm((rr_2 - delta) / stand_error)
power_e <- l_tail + u_tail
cat("Power for part e: ", round(power_e, 2), "\n")
# Part b
stand_error <- sqrt(2)
alpha_1 <- 0.05
z_1 <- qnorm(1-alpha_1) # z critical for one sided
rr <- z_1 * stand_error
# Part c
delta <- 1
power_c <- 1 - pnorm((rr - delta)/stand_error)
cat("Power for part c: ", round(power_c, 2), "\n")
# Part e
z_2 <- qnorm(1 - alpha_1/2) # calculate new z critical for two sided
rr_2 <- z_2 * stand_error
l_tail <- pnorm((-rr_2 - delta) / stand_error)
u_tail <- 1 - pnorm((rr_2 - delta) / stand_error)
power_e <- l_tail + u_tail
cat("Power for part e: ", round(power_e, 2), "\n")
# Part b
stand_error <- sqrt(2)
alpha_1 <- 0.05
z_1 <- qnorm(1-alpha_1) # z critical for one sided
rr <- z_1 * stand_error
# Part c
delta <- 1
power_c <- 1 - pnorm((rr - delta)/stand_error)
cat("Power for part c: ", round(power_c, 2), "\n")
# Part e
z_2 <- qnorm(1 - alpha_1/2) # calculate new z critical for two sided
rr_2 <- z_2 * stand_error
l_tail <- pnorm((-rr_2 - delta) / stand_error)
u_tail <- 1 - pnorm((rr_2 - delta) / stand_error)
power_e <- l_tail + u_tail
cat("Power for part e: ", round(power_e, 2), "\n")
calcium <- read.csv("calcium.csv")
head(calcium)
# Parametric
t.test(calcium$flame, calcium$oxalate, paired = TRUE)
# Non-parametric
wilcox.test(calcium$flame, calcium$oxalate, paired = TRUE)
calcium <- read.csv("calcium.csv")
head(calcium)
# Parametric
para_res <- t.test(calcium$flame, calcium$oxalate, paired = TRUE)
para_res$p.value
# Non-parametric
npara_res <- wilcox.test(calcium$flame, calcium$oxalate, paired = TRUE)
npara_res$p.value
calcium <- read.csv("calcium.csv")
head(calcium)
# Parametric
para_res <- t.test(calcium$flame, calcium$oxalate, paired = TRUE)
res_3 <- para_res$p.value
cat("The p-value for the parametric is: ", res_3, "\n")
# Non-parametric
npara_res <- wilcox.test(calcium$flame, calcium$oxalate, paired = TRUE)
res_4 <- npara_res$p.value
cat("The p-value for the nonparametric is: ", res_4, "\n")
calcium <- read.csv("calcium.csv")
head(calcium)
# Parametric
para_res <- t.test(calcium$flame, calcium$oxalate, paired = TRUE)
res_3 <- para_res$p.value
cat("The p-value for the parametric is: ", res_3, "\n")
# Non-parametric
npara_res <- wilcox.test(calcium$flame, calcium$oxalate, paired = TRUE)
res_4 <- npara_res$p.value
cat("The p-value for the nonparametric is: ", res_4, "\n")
# Graph Differences
calcium_diff <- calcium$flame - calcium$oxalate
hist(calcium_diff, main = "Differences between oxolate and flame",
xlab = "Difference (flame - oxolate)",
ylab = "Frequency",
col = "blue")
test <- c(676, 206, 230, 256, 280, 433, 337, 466, 497, 512, 794, 428, 452, 512)
control <- c(88, 570, 605, 617, 653, 2913, 924, 286, 1098, 982, 2346, 321, 615, 519)
diffs <- test - control
# Part a
plot(control, diffs, xlab = "Control Fault Rate", ylab = "Test - Control", main = "Difference vs Control Fault Rate", col = "blue")
abline(h=0, col = "red")
mean_diff <- mean(diffs)
cat("Mean Difference: ", mean_diff, "\n")
sd_diff <- sd(diffs)
cat("SD Difference: ", sd_diff, "\n")
n <- length(diffs)
mean_diff <- mean(diffs)
cat("Mean Difference: ", mean_diff, "\n")
sd_diff <- sd(diffs)
cat("SD Difference: ", sd_diff, "\n")
n <- length(diffs)
ci <- qt(0.975, df = n-1) * sd_diff / sqrt(n)
upper_ci <- mean_diff + ci
lower_ci <- mean_diff - ci
cat("95% CI: (", lower_ci, ",", upper_ci, ")", "\n" )
median_diff <- median(diffs)
cat("Median Difference: ", median_diff, "\n")
median_ci <- quantile(diffs, probs = c(0.025, 0.975))
median_diff <- median(diffs)
cat("Median Difference: ", median_diff, "\n")
median_ci <- quantile(diffs, probs = c(0.025, 0.975))
cat("95% CI: ", median_ci, "\n")
median_diff <- median(diffs)
cat("Median Difference: ", median_diff, "\n")
median_ci <- quantile(diffs, probs = c(0.025, 0.975))
cat("95% CI: (", median_ci, ")", "\n")
median_diff <- median(diffs)
cat("Median Difference: ", median_diff, "\n")
median_ci <- quantile(diffs, probs = c(0.025, 0.975))
cat("95% CI: (", median_ci[1], ")", "\n")
median_diff <- median(diffs)
cat("Median Difference: ", median_diff, "\n")
median_ci <- quantile(diffs, probs = c(0.025, 0.975))
cat("95% CI: (", median_ci[1],",", median_ci[2], ")", "\n")
t.test(test, control, paired = TRUE)
wilcox.test(test, control, paired = TRUE)
# Paired t-test
t.test(test, control)
# Nonparametric
wilcox.test(test, control, paired = TRUE)
# Paired t-test
t.test(test, control, paired = TRUE)
# Nonparametric
wilcox.test(test, control, paired = TRUE)
# Paired t-test
paired_res <- t.test(test, control, paired = TRUE)
res_5 <- paired_res$p.value
# Nonparametric
nonpara_res <- wilcox.test(test, control, paired = TRUE)
res_6 <- nonpara_res$p.value
# Paired t-test
paired_res <- t.test(test, control, paired = TRUE)
res_5 <- paired_res$p.value
cat("T-test p-value: ", res_5, "\n")
# Nonparametric
nonpara_res <- wilcox.test(test, control, paired = TRUE)
res_6 <- nonpara_res$p.value
cat("Nonparametric p-value: ", res_6, "\n")
knitr::opts_chunk$set(echo = TRUE)
data_1 <- read.csv("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
data_1 <- import("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
library(tidyverse)
library(rio)
library(tidyverse)
install.packages(rio)
library(rio)
library(tidyverse)
data_1 <- import("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
library(tidyverse)
data_1 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
library(tidyverse)
data_1 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
data_1.head()
library(tidyverse)
data_1 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
head(data_1)
library(tidyverse)
data_1 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
head(data_1)
data_2 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
head(data_2)
library(tidyverse)
data_1 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
head(data_1, 20)
data_2 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
head(data_2, 20)
data_1[2]
library(tidyverse)
data_1 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
str(data_1)
data_2 <- load("/Users/maddybursell/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
head(data_2, 20)
load("~/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
load("~/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
load("~/Documents/ST 502/Wheelchair_basketball_lineups/Doneck_Dolphins_analysis/data/line_ups.RData")
View(line_ups)
View(line_ups)
View(Trier_data)
View(Trier_data)
library(readxl)
library(dplyr)
# Step 1: Read in your data
# Replace with your actual file name and sheet name if needed
df <- read_excel("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/data_trier.xlsx")
head(df)
str(df)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(dplyr)
# Step 1: Read in your data
# Replace with your actual file name and sheet name if needed
df <- read_excel("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/data_trier.xlsx")
# Step 2: Estimate ORB (Offensive Rebounds)
# Assume 25-30% of total rebounds are offensive (can tweak this to 0.30 if you prefer)
df <- df %>%
mutate(ORB = 0.3 * Rebounds)  # ORB = 30% of total rebounds (can change to 0.25)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(dplyr)
# Step 1: Read in your data
# Replace with your actual file name and sheet name if needed
df <- read_excel("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/data_trier.xlsx")
# Step 2: Estimate ORB (Offensive Rebounds)
# Assume 25-30% of total rebounds are offensive (can tweak this to 0.30 if you prefer)
df <- df %>%
mutate(ORB = 0.3 * rebounds)  # ORB = 30% of total rebounds (can change to 0.25)
# Step 3: Define functions to compute Points Produced and Possessions Used
estimate_points_produced <- function(PTS, AST, ORB) {
# Points Produced = Points + assist bonus + ORB bonus
assist_bonus <- 0.5 * AST     # Simplified assist contribution
orb_bonus <- 0.25 * ORB       # Simplified ORB contribution
return(PTS + assist_bonus + orb_bonus)
}
estimate_possessions_used <- function(FGA, FTA, TOV, ORB) {
# Possessions Used = FGA + (0.44 * FTA) + TOV - (0.25 * ORB)
return(FGA + 0.44 * FTA + TOV - 0.25 * ORB)
}
# Step 4: Apply the functions and calculate ORtg
df <- df %>%
rowwise() %>%
mutate(
Points_Produced = estimate_points_produced(points, assists, ORB),
Possessions_Used = estimate_possessions_used(FGA, FTA, turnovers, ORB),
ORtg = ifelse(Possessions_Used > 0, (Points_Produced / Possessions_Used) * 100, NA_real_)
) %>%
ungroup()
# Step 5: View results
df %>% select(player, Points_Produced, Possessions_Used, ORtg)
str(df)
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(readxl)
library(dplyr)
#install.packages("writexl")  # only once
library(writexl)
# Step 1: Read in your data
# Replace with your actual file name and sheet name if needed
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
# Step 2: Estimate ORB (Offensive Rebounds)
# Assume 25-30% of total rebounds are offensive (can tweak this to 0.30 if you prefer)
df <- df %>%
mutate(ORB = 0.3 * rebounds)  # ORB = 30% of total rebounds (can change to 0.25)
# Step 3: Define functions to compute Points Produced and Possessions Used
estimate_points_produced <- function(PTS, AST, ORB) {
# Points Produced = Points + assist bonus + ORB bonus
assist_bonus <- 0.5 * AST     # Simplified assist contribution
orb_bonus <- 0.25 * ORB       # Simplified ORB contribution
return(PTS + assist_bonus + orb_bonus)
}
estimate_possessions_used <- function(FGA, FTA, TOV, ORB) {
# Possessions Used = FGA + (0.44 * FTA) + TOV - (0.25 * ORB)
return(FGA + 0.44 * FTA + TOV - 0.25 * ORB)
}
# Step 4: Apply the functions and calculate ORtg
df <- df %>%
rowwise() %>%
mutate(
Points_Produced = estimate_points_produced(points, assists, ORB),
Possessions_Used = estimate_possessions_used(FGA, FTA, turnovers, ORB),
ORtg = ifelse(Possessions_Used > 0, (Points_Produced / Possessions_Used) * 100, NA_real_)
) %>%
ungroup()
# Step 5: View results
df %>% select(player, Points_Produced, Possessions_Used, ORtg)
write_xlsx(df, path = "new_data_trier.xlsx")
str(df)
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
df$obs <- df$rebounds * 0.3
est_OeffR <- function(dataframe){
# estimate points produced
assist_bonus <- dataframe$assists * 0.5
orb_bonus <- dataframe$obs * 0.25
pts_prod <- dataframe$points + assist_bonus + orb_bonus
# estimate possessions
possessions <- dataframe$FGA + (0.44 * dataframe$FTA) + dataframe$turnovers - orb_bonus
# calculate offensive efficiency rating
ORtg = ifelse(posessions > 0, (pts_prod / possessions) * 100, NA_real_)
}
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
df$obs <- df$rebounds * 0.3
est_OeffR <- function(dataframe){
# estimate points produced
assist_bonus <- dataframe$assists * 0.5
orb_bonus <- dataframe$obs * 0.25
pts_prod <- dataframe$points + assist_bonus + orb_bonus
# estimate possessions
possessions <- dataframe$FGA + (0.44 * dataframe$FTA) + dataframe$turnovers - orb_bonus
# calculate offensive efficiency rating
OeffR = ifelse(posessions > 0, (pts_prod / possessions) * 100, NA_real_)
dataframe$ORtg <- OeffR
return(dataframe)
}
new_df <- est_OeffR(df)
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
df$obs <- df$rebounds * 0.3
est_OeffR <- function(dataframe){
# estimate points produced
assist_bonus <- dataframe$assists * 0.5
orb_bonus <- dataframe$obs * 0.25
pts_prod <- dataframe$points + assist_bonus + orb_bonus
# estimate possessions
possessions <- dataframe$FGA + (0.44 * dataframe$FTA) + dataframe$turnovers - orb_bonus
# calculate offensive efficiency rating
OeffR = ifelse(posessions > 0, (pts_prod / possessions) * 100, NA_real_)
dataframe$ORtg <- OeffR
return(dataframe)
}
new_df <- est_OeffR(df)
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
df$obs <- df$rebounds * 0.3
est_OeffR <- function(dataframe){
# estimate points produced
assist_bonus <- dataframe$assists * 0.5
orb_bonus <- dataframe$obs * 0.25
pts_prod <- dataframe$points + assist_bonus + orb_bonus
# estimate possessions
posessions <- dataframe$FGA + (0.44 * dataframe$FTA) + dataframe$turnovers - orb_bonus
# calculate offensive efficiency rating
OeffR = ifelse(posessions > 0, (pts_prod / possessions) * 100, NA_real_)
dataframe$ORtg <- OeffR
return(dataframe)
}
new_df <- est_OeffR(df)
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
df$obs <- df$rebounds * 0.3
est_OeffR <- function(dataframe){
# estimate points produced
assist_bonus <- dataframe$assists * 0.5
orb_bonus <- dataframe$obs * 0.25
pts_prod <- dataframe$points + assist_bonus + orb_bonus
# estimate possessions
posessions <- dataframe$FGA + (0.44 * dataframe$FTA) + dataframe$turnovers - orb_bonus
# calculate offensive efficiency rating
OeffR = ifelse(posessions > 0, (pts_prod / posessions) * 100, NA_real_)
dataframe$ORtg <- OeffR
return(dataframe)
}
new_df <- est_OeffR(df)
head(new_df)
str(new_df)
# Load libraries
library(readxl)
library(dplyr)
library(writexl)
# Read in file
df <- read_excel("Doneck_Dolphins_analysis/data/data_trier.xlsx")
df$obs <- df$rebounds * 0.3
est_OeffR <- function(dataframe){
# estimate points produced
assist_bonus <- dataframe$assists * 0.5
orb_bonus <- dataframe$obs * 0.25
pts_prod <- dataframe$points + assist_bonus + orb_bonus
# estimate possessions
posessions <- dataframe$FGA + (0.44 * dataframe$FTA) + dataframe$turnovers - orb_bonus
# calculate offensive efficiency rating
OeffR = ifelse(posessions > 0, (pts_prod / posessions) * 100, NA_real_)
dataframe$ORtg <- OeffR
return(dataframe)
}
# Run function and create new excel file
new_df <- est_OeffR(df)
write_xlsx(new_df, path = "new_data_trier.xlsx")
str(new_df)
new_df$TS <- (new_df$points) / (2*(new_df$FGA + (0.44*new_df$FTA)))
str(new_df)
save(Trier_data, file = './data/Trier_data_clean_new.RData')
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/Trier_data_clean_new.R")
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/Trier_data_clean_new.R")
pwd
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/Trier_data_clean_new.R")
# xls files
#trier_data <- read_excel("./data/data_trier.xlsx")
trier_data <- read_excel("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/data_trier.xlsx")
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/Trier_data_clean_new.R", echo=TRUE)
str(Trier_data)
save(Trier_data, file = '../data/Trier_data_clean_new.RData')
dir.exists("../data")
getwd()
setwd("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts")
save(Trier_data, file = '../data/Trier_data_clean_new.RData')
load('../data/Trier_data_clean.RData')
setwd("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts")
load('../data/Trier_data_clean.RData')
load('./data/Trier_data_clean.RData')
setwd("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts")
load('./data/Trier_data_clean.RData')
load("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
load("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData")
getwd()
list.files("./data")
setwd("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data")
load('./data/Trier_data_clean.RData')
getwd()
load('./data/Trier_data_clean_new.RData')
setwd("/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data")
#load('./data/Trier_data_clean_new.RData')
load('/Users/maddybursell/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/data/Trier_data_clean_new.RData')
Trier_data$id_player <- as.factor(Trier_data$id_player)
player_abv <- c()
for (i in 1 : length(Trier_data[, 1])) {
if(Trier_data$id_player[i] == 1){player_abv[i] <- "A.B."}
if(Trier_data$id_player[i] == 2){player_abv[i] <- "C.R."}
if(Trier_data$id_player[i] == 3){player_abv[i] <- "D.G."}
if(Trier_data$id_player[i] == 4){player_abv[i] <- "D.P."}
if(Trier_data$id_player[i] == 5){player_abv[i] <- "L.J."}
if(Trier_data$id_player[i] == 6){player_abv[i] <- "N.P."}
if(Trier_data$id_player[i] == 7){player_abv[i] <- "P.D."}
if(Trier_data$id_player[i] == 8){player_abv[i] <- "S.E."}
if(Trier_data$id_player[i] == 9){player_abv[i] <- "W.V."}
}
Trier_data$Player <- as.factor(player_abv)
# 1. Plot--------------
# PIR-----------
library(RColorBrewer)
ggplot(Trier_data, aes(id_game, PIR_per_min, group = Player, colour = Player)) +
geom_point(size = 5) +
geom_line(size = 3, linetype = 'solid') +
labs(x="Game", y=expression("PIR/min")) +
theme_classic(base_size = 20, base_line_size = 15/20) +
theme(#plot.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
#panel.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
panel.grid.major = element_line(colour = rgb(212/255, 211/255, 217/255)),
#legend.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
legend.position = "right",
legend.text = element_text( size = 14)) +
scale_colour_brewer(palette = "Set1", guide = guide_legend(ncol=1))+
scale_x_continuous(breaks=seq(0, 18, 2))+
scale_y_continuous(breaks=seq(-1.25, 2.25, .25), limits = c(-1, 2))
# EFF--------------
ggplot(Trier_data, aes(id_game, EFF_per_min, group = Player, colour = Player)) +
geom_point(size = 5) +
geom_line(size = 3, linetype = 'solid') +
labs(x="Game", y=expression("EFF/min")) +
theme_classic(base_size = 20, base_line_size = 15/20) +
theme(#plot.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
#panel.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
panel.grid.major = element_line(colour = rgb(212/255, 211/255, 217/255)),
#legend.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
legend.position = "right",
legend.text = element_text( size = 14)) +
scale_colour_brewer(palette = "Set1", guide = guide_legend(ncol=1))+
scale_x_continuous(breaks=seq(0, 18, 2))+
scale_y_continuous(breaks=seq(-1.25, 2.25, .25), limits = c(-1, 2))
# Winscore-------------------
ggplot(Trier_data, aes(id_game, Winscore_min, group = Player, colour = Player)) +
geom_point(size = 5) +
geom_line(size = 3, linetype = 'solid') +
labs(x="Game", y=expression("Win Score/min")) +
theme_classic(base_size = 20, base_line_size = 15/20) +
theme(#plot.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
#panel.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
panel.grid.major = element_line(colour = rgb(212/255, 211/255, 217/255)),
#legend.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
legend.position = "right",
legend.text = element_text( size = 14)) +
scale_colour_brewer(palette = "Set1", guide = guide_legend(ncol=1))+
scale_x_continuous(breaks=seq(0, 18, 2))+
scale_y_continuous(breaks=seq(-1.25, 2.25, .25), limits = c(-1, 2))
# TrueShooting%-------------------
ggplot(Trier_data, aes(id_game, TS_min, group = Player, colour = Player)) +
geom_point(size = 5) +
geom_line(size = 3, linetype = 'solid') +
labs(x="Game", y=expression("True Shooting % /min")) +
theme_classic(base_size = 20, base_line_size = 15/20) +
theme(#plot.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
#panel.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
panel.grid.major = element_line(colour = rgb(212/255, 211/255, 217/255)),
#legend.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
legend.position = "right",
legend.text = element_text( size = 14)) +
scale_colour_brewer(palette = "Set1", guide = guide_legend(ncol=1))+
scale_x_continuous(breaks=seq(0, 18, 2))+
scale_y_continuous(breaks=seq(-1.25, 2.25, .25), limits = c(-1, 2))
ggplot(Trier_data, aes(id_game, TS_min, group = Player, colour = Player)) +
geom_point(size = 5) +
geom_line(size = 3, linetype = 'solid') +
labs(x="Game", y=expression("True Shooting % /min")) +
theme_classic(base_size = 20, base_line_size = 15/20) +
theme(#plot.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
#panel.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
panel.grid.major = element_line(colour = rgb(212/255, 211/255, 217/255)),
#legend.background = element_rect(fill = rgb(212/255, 211/255, 217/255)),
legend.position = "right",
legend.text = element_text( size = 14)) +
scale_colour_brewer(palette = "Set1", guide = guide_legend(ncol=1))+
scale_x_continuous(breaks=seq(0, 18, 2))+
scale_y_continuous(breaks=seq(-0.50, 1.00, .25), limits = c(-1, 2))
source("~/Documents/ST 502/ST502-Final-Project/Doneck_Dolphins_analysis/scripts/mixed_model_Trier2.R", echo=TRUE)
